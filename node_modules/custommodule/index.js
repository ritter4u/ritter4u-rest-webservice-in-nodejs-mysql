'use strict';
/**
 *
 */
var access_token_expire_after_days = 10;
var PI = Math.PI;
var uuid = require('../node-uuid'); // for generation access token
var sha1 = require('../sha1');// for generation access token
var dateFormat = require('../dateformat'); // for dateformat
var SALT = 'DYhG93b0qyJfIxfs2guVoUubWwvniR';
/*
 * All code for error and message
 */

var AUTH_CODE_ERROR = 101;
var AUTH_CODE_ERROR_MESSAGE = 'Authentication failure.';

var ACCESS_TOKEN_NOT_FOUND_ERROR = 102;
var ACCESS_TOKEN_NOT_FOUND_ERROR_MESSAGE = 'Access token not found.';


/*
 * make mysql connection 
 */

var mysql = require('mysql'),
    connection = mysql.createConnection({
        host: '127.0.0.1',
        user: 'root',
        password: 'root',
        database: 'nodejsdatabase'
    });

connection.connect(function (err) {
    if (err) {
        console.log("DB conn error...");
    } else {
        console.log("DB connected :)");
    }
});

/*
 * it will connect if lost connection 
 */

function handleDisconnect(connection) {
    connection.on('error', function (err) {
        if (!err.fatal) {
            return;
        }

        if (err.code !== 'PROTOCOL_CONNECTION_LOST') {
            throw err;
        }
        console.log('Re-connecting lost connection: ' + err.stack);
        connection = mysql.createConnection(connection.config);
        handleDisconnect(connection);
        connection.connect();
    });
}


//always generate new token
/*
 * @param : myObject : pass user object : as json format
 * we need user.id for updating the access token
 * 
 */

function generateNewToken(r,res){
	
	var myObject = JSON.parse(r);
	console.log("callbak execute")
	
	// generate unique id for token 
	var access_token = uuid.v1({
        msecs: new Date().getTime()
    });

    var queryData = [{
        access_token: (access_token),
        access_token_createdDate: (dateFormat(new Date(), "yyyy-mm-dd"))
    }, {
        id: (myObject.id)
    }];
    var query = connection.query('UPDATE wp_users SET ? WHERE ? ', queryData, function (err, result, fields) {
        if (err) {
            console.log(err);
            console.log(query.sql)
            throw err;
        }
        return err ? res.send(err) : getAccessToken(myObject.id,res); 
    });	
}

/*
 * get access token
 * @param : id :pass id of the user
 * @param : res :pass res parameter of the server check server.js
 * 
 */

function getAccessToken(id,res){
	
	 var queryData = [{
         id: (id)
     }
     ];
	var fields = 'access_token , id';
    
    var query = connection.query('SELECT '+fields+' FROM wp_users WHERE  ? ;', queryData, function (err, result, fields) {
        if (err) {
            console.log(err);
            console.log(query.sql)
            throw err;
        }
        
        if (isEmpty(result) === false) {
        	console.log('return access token and id of the user ');
        	return err ? res.send(err) : res.json(result); 
        } else {
        		//console.log(query.sql)
        	var myArray = {};
        	myArray.error = 'TRUE';
        	myArray.code = ACCESS_TOKEN_NOT_FOUND_ERROR;
        	myArray.message = ACCESS_TOKEN_NOT_FOUND_ERROR_MESSAGE;
        	
        	return res.json((myArray));
        		
        }
    }); 
   // console.log(query.sql)
    
}



/* @function : comparePassword
 * @param : r : need existing user password from database
 * @res : response set from server.js
 * @encrypted_password_from_client : encrypted password pass from client side
 * @callback : callback function if encrypted_password_from_client and encrypted_password_from_server same
 * It will generate compare encypted password from  of  server as well as client 
 */

function comparePassword(r,res,encrypted_password_from_client,callback) {
	
     var myObject = JSON.parse(r);
     var encrypted_password_from_server = myObject.password;
    // var upper = sha1(current_user_pasword).toUpperCase();
    // var encrypted_password_from_server = sha1(upper+SALT);
    /* console.log('encrypted_password_from_client'+encrypted_password_from_client)
     console.log('encrypted_password_from_server'+encrypted_password_from_server)
    */ 
    if(encrypted_password_from_server == encrypted_password_from_client) {
    	callback();
    } else {
    	var myArray = {};
    	myArray.error = 'TRUE';
    	myArray.code = AUTH_CODE_ERROR;
    	myArray.message = AUTH_CODE_ERROR_MESSAGE;
    	return res.json((myArray));
    }
    
}

/* @function : generateAccessToken
 * @param : r : need user id
 * It will generate new access_token if the existing user's access_token is expire 
 */

function generateAccessToken(r,res) {
	var myObject = JSON.parse(r);
    // to check existing token expire or not
    // if expire then generateNewToken()
    isAccesstokenExpire(myObject.id , res, function(){
    	generateNewToken(r,res); // call back function if the token is expire for the user
    });
}

/* @function : isAccesstokenExpire
 * @param : id : user id
 * To check the user's token is expire or not
 * if token is expire then execure callback function
 * You must have to pass callback function in the case of expiration of the access_token for user. 
 */

function isAccesstokenExpire(id, res ,callback) {
    var queryData = [{
            id: (id)
        },
        (dateFormat(new Date().setDate(new Date().getDate() - access_token_expire_after_days), "yyyy-mm-dd")) 
    ];
    var fields = 'access_token , id';
    var query = connection.query('SELECT '+fields+' FROM wp_users WHERE  ? AND access_token_createdDate > ? and access_token  IS NOT NULL and access_token != "" ;', queryData, function (err, result, fields) {
        if (err) {
        	console.log(query.sql)
            console.log(err);
            throw err;
        }
        if (isEmpty(result) === false) {
        	console.log('no need to generate new access_token');
        	return err ? res.send(err) : res.json(result); 
        } else {
        	console.log('generate new access_token');
        	callback();
        }
    }); 
   // console.log(query.sql)
}

var isEmpty = function (obj) {
    return Object.keys(obj).length === 0;
}

handleDisconnect(connection);

/* @function : login
 * @param : data : you have to pass user email and encrypted password : check server.js method : login
 * @res : response set from server.js
 * @callback funtion : callback function
 */


exports.login = function (data, res ,callback) {
	
	 /*var queryPaswordData = [{
	        email: (data[0]),
	        password: encrypted_password
	    }];
	  */
	 var queryPaswordData = [{
	        email: (data[0])
	    }];
	 
	 var encrypted_password = data[1];
	
	 
	 // get the details based on the user email
    var query = connection.query('SELECT * FROM wp_users WHERE  ?;', queryPaswordData, function (err, results, fields) {
        if (err) {
            console.log(err);
            console.log(query.sql)
            throw err;
        }
        if (isEmpty(results) === false) {
        	//console.log("pass here:" + encrypted_password)
        	// it will compare the encypted password with salt from the existing database to password coming from client side.
        	comparePassword(JSON.stringify(results[0]),res,encrypted_password,function(){generateAccessToken(JSON.stringify(results[0]),res)});
        } else {
        	var myArray = {};
        	myArray.code = AUTH_CODE_ERROR;
        	myArray.message = AUTH_CODE_ERROR_MESSAGE;
        	return res.json((myArray));
            
        }
    }); 
};


/* @function : getUserDetails
 * @param : data : you have to pass user id : check server.js method : getUserDetails
 * @res : response set from server.js
 * @callback funtion : callback function
 */

exports.getUserDetails = function (data, res ,callback) {
	 //console.log(data)
	 var queryData = [{
		 access_token: (data[0])
	    }, {
	    	id: (data[1])
	    }];
	 
	 var query = connection.query('SELECT * FROM wp_users WHERE  ? AND ? ;', queryData, function (err, results, fields) {
	        if (err) {
	            console.log(err);
	            console.log(query.sql)
	            throw err;
	        }
	        if (isEmpty(results) === false) {
	        	return err ? res.send(err) : res.json(results); 
	        } else {
	        	var myArray = {};
	        	myArray.error = 'TRUE';
	        	myArray.code = AUTH_CODE_ERROR;
	        	myArray.message = AUTH_CODE_ERROR_MESSAGE;
	        	return res.json((myArray));
	        }
	    });
	
};
